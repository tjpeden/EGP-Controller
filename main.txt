@name EGP Main Controller
@inputs E:wirelink Reset
@outputs Ops
@persist Owner:entity Self:entity
@persist Controllers:array Buttons:table Info:gtable
@persist LastCount

#[
    This is a sort of MVC style way of writing EGP
    "Apps" where this controller acts as a protal
    to the others.
    
    Dependencies: player_use_key.txt
]#

function number nextID() {
    ID = Info["NextID", number]
    Info["NextID", number] = ID + 1
    return ID
}

# Creates a button where the text is centered inside a Width x 30 rounded box
function table newButton(Text:string, Position:vector2, Width) {
    Button = table()
    
    ContainerID = nextID()
    TextID      = nextID()
    BorderColor = vec(255, 255, 255)
    TextColor   = vec(0, 0, 200)
    
    
    E:egpRoundedBoxOutline(ContainerID, Position, vec2(Width,30))
    E:egpColor(ContainerID, BorderColor)
    E:egpText(TextID, Text, vec2(0,0))
    E:egpAlign(TextID, 1, 1)
    E:egpColor(TextID, TextColor)
    E:egpParent(TextID, ContainerID)
    
    TopLeft = E:egpPos(ContainerID)
    
    # Save defaults to "object"
    Button["Text", string]           = Text
    Button["ContainerID", number]    = ContainerID
    Button["TextID", number]         = TextID
    Button["BorderColor", vector]    = BorderColor
    Button["TextColor", vector]      = TextColor
    Button["HighlightColor", vector] = vec(0, 128, 255)
    Button["EGP", wirelink]          = E
    Button["TopLeft", vector2]       = TopLeft
    Button["BottomRight", vector2]   = TopLeft + E:egpSize(ContainerID)
    
    Buttons:pushTable(Button)
    return Button
}

function normal table:btHitTest(Cursor:vector2) {
    return inrange(Cursor, This["TopLeft", vector2], This["BottomRight", vector2])
}

# On mouse enter, highlight button text
function void table:btHighlight() {
    This["EGP", wirelink]:egpColor(This["TextID", number], This["HighlightColor", vector])
}

# On mouse exit, unhighlight button text
function void table:btUnhighlight() {
    This["EGP", wirelink]:egpColor(This["TextID", number], This["TextColor", vector])
}

# Quick function for creating the cursor
function void wirelink:egpCreateCursor(ObjectID) {
    This:egpCircleOutline(ObjectID, vec2(0,0), vec2(5,5))
    This:egpColor(ObjectID, vec(255, 0, 0))
    This:egpParentToCursor(ObjectID)
}

# Utility method on the entity class
function normal entity:lookingAt(Other:entity) {
    return This:aimEntity() == Other
}

# This method signals another controller to take over execution
function void run(Name:string) {
    dsSend(Name, "EGP.Portal", entity())
    dsSend("Bind.Use", "DSS.Events", 2, 0)
    runOnTick(0)
}

# Record registration of a subcontroller
function void register(Name:string) {
    Exists = 0
    for(I = Controllers:minIndex(), Controllers:maxIndex()) {
        if(Controllers[I, string] == Name) {
            Exists = 1
            break
        }
    }
    
    if(!Exists) { Controllers:pushString(Name) }
}

# Draw/redraw buttons (used when new controllers register)
function void createButtons() {
    for(I = Controllers:minIndex(), Controllers:maxIndex()) {
        N = I -1
        
        Name = Controllers[I, string]
        Button = newButton(Name, vec2(floor(N / 16) * 128, N * 32), 126)
        Button["Controller", string] = Name
    }
}

#[
    Runtime code starts here
]#

# Setup for main controller execution
if( first() | dsClk("Back") | ~Reset&Reset ) {
    runOnTick(1)
    
    dsSend("Halt", "EGP.Portal", entity())
    dsSend("Update", "EGP.Portal", entity())
    
    # Register player use key events
    dsSend("Bind.Use", "DSS.Events", 2, 1)
    
    Buttons = table()
    Controllers = array()
    
    # Make sure we have full control of what being displayed
    E:egpClear()
    E:egpDrawTopLeft(1)
    
    CursorID = nextID()
    E:egpCreateCursor(CursorID)
}

# Setup global persistant variables
if( first() ) {    
    Owner = owner()
    Info  = gTable("EGP.Portal")
    
    Info["NextID", number] = 1
    
    dsJoinGroup("EGP.Portal") # Join control group
}

if(!->E) { exit() }
if(!Self) { Self = E:entity() }

# Registration handler
if(dsClk("Register")) {
    Name = dsGetString()
    Sender = dsGetSender()
    
    register(Name)
    
    dsSendDirect("Registered", Sender, E)
    exit()
}

# Update for newly registered controllers
Count = Controllers:count()
if(Count > LastCount) { createButtons() }
LastCount = Count

# Check for and act on hover events
if( Owner:lookingAt(Self) ) {
    Cursor = E:egpCursor(Owner)
    
    #foreach(K, Button:table = Buttons) {
    for(I = 1, Buttons:count()) {
        Button = Buttons[I, table]
        if(Button:btHitTest(Cursor)) {
            Button:btHighlight()
        } else {
            Button:btUnhighlight()
        }
    }
}

# Check for and act on player use key events
if( dsClk("Use.Triggered") & Owner:lookingAt(Self) ) {
    Cursor = E:egpCursor(Owner)
    
    #foreach(K, Button:table = Buttons) {
    for(I = 1, Buttons:count()) {
        Button = Buttons[I, table]
        if(Button:btHitTest(Cursor)) {
            if(Button:exists("Controller")) { run( Button["Controller", string] ) }
        }
    }
}

Ops = opcounter()
